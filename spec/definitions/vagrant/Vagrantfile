require_relative "machinery_rpm_provisioner"

VAGRANTFILE_API_VERSION = "2"

def inject_common_test_data(base)
  prepare_test_environment_script = File.read(
    File.expand_path("../../provision_common.sh", __FILE__)
  )

  base.vm.provision "shell", inline: prepare_test_environment_script
end

def inject_rpm_test_data(base)
  prepare_test_environment_script = File.read(
    File.expand_path("../../provision_rpm.sh", __FILE__)
  )

  base.vm.provision "shell", inline: prepare_test_environment_script
  inject_common_test_data(base)
end

def inject_dpkg_test_data(base)
  prepare_test_environment_script = File.read(
    File.expand_path("../../provision_dpkg.sh", __FILE__)
  )

  base.vm.provision "shell", inline: prepare_test_environment_script
  inject_common_test_data(base)
end

def add_test_user(base)
  add_machinery_user = File.read(
    File.expand_path("../../add_machinery_user.sh", __FILE__)
  )

  base.vm.provision "shell", inline: add_machinery_user
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.define :opensuse_tumbleweed do |opensuse_tumbleweed|
    opensuse_tumbleweed.vm.box = "base_opensuse_tumbleweed_kvm"

    opensuse_tumbleweed.vm.provider :libvirt do |domain|
      domain.memory = 1024
      domain.cpus = 1
      domain.nested = false
      domain.volume_cache = 'none'
    end

    inject_rpm_test_data(opensuse_tumbleweed)
    add_test_user(opensuse_tumbleweed)
  end

  config.vm.define :opensuse_leap do |opensuse_leap|
    opensuse_leap.vm.box = "base_opensuse_leap_kvm"

    opensuse_leap.vm.provider :libvirt do |domain|
      domain.memory = 1024
      domain.cpus = 1
      domain.nested = false
      domain.volume_cache = 'none'
    end

    inject_rpm_test_data(opensuse_leap)
    add_test_user(opensuse_leap)
  end

  config.vm.define :ubuntu_1404 do |ubuntu|
    ubuntu.vm.box = "base_ubuntu14.04_kvm"

    ubuntu.vm.provider :libvirt do |domain|
      domain.memory = 1024
      domain.cpus = 1
      domain.nested = false
      domain.volume_cache = 'none'
    end

    inject_dpkg_test_data(ubuntu)
    add_test_user(ubuntu)
  end

  config.vm.define :machinery_Tumbleweed do |machinery_tumbleweed|
    machinery_tumbleweed.vm.box = "machinery_opensuse_tumbleweed_kvm"
    machinery_tumbleweed.vm.network :private_network, network_name: "default"

    machinery_tumbleweed.vm.provider :libvirt do |domain|
      domain.memory = 1024
      domain.cpus = 1
      domain.nested = false
      domain.volume_cache = 'none'
    end

    machinery_tumbleweed.vm.provision "machinery_rpm",
      api: "https://api.opensuse.org",
      project: "systemsmanagement:machinery",
      package: "openSUSE_Tumbleweed"
  end

  config.vm.define :machinery_leap do |machinery_leap|
    machinery_leap.vm.box = "machinery_opensuse_leap_kvm"
    machinery_leap.vm.network :private_network, network_name: "default"

    machinery_leap.vm.provider :libvirt do |domain|
      domain.memory = 1024
      domain.cpus = 1
      domain.nested = false
      domain.volume_cache = 'none'
    end

    machinery_leap.vm.provision "machinery_rpm",
      api: "https://api.opensuse.org",
      project: "systemsmanagement:machinery",
      package: "openSUSE_Leap_42.2"
  end


  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder '.', "/vagrant", type: "rsync"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file machinery_base_opensuse12.3_kvm.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
